# diff in diff example with minimum wage data
minwage <- read.csv("../data/minwage.csv") # load the data
setwd("~/Dropbox/SalemCenter/classes/PRL/Spring2024/Policy-Research-Laboratory/code")
# diff in diff example with minimum wage data
minwage <- read.csv("../data/minwage.csv") # load the data
minwageNJ <- subset(minwage, subset = (location != "PA"))
minwagePA <- subset(minwage, subset = (location == "PA"))
minwageNJ$fullPropAfter <- minwageNJ$fullAfter /
(minwageNJ$fullAfter + minwageNJ$partAfter)
minwagePA$fullPropAfter <- minwagePA$fullAfter /
(minwagePA$fullAfter + minwagePA$partAfter)
minwageNJ$fullPropBefore <- minwageNJ$fullBefore /
(minwageNJ$fullBefore + minwageNJ$partBefore)
minwagePA$fullPropBefore <- minwagePA$fullBefore /
(minwagePA$fullBefore + minwagePA$partBefore)
NJdiff <- mean(minwageNJ$fullPropAfter) - mean(minwageNJ$fullPropBefore)
PAdiff <- mean(minwagePA$fullPropAfter) - mean(minwagePA$fullPropBefore)
NJdiff - PAdiff
# adding a binary variable to our data set
minwage_big = rbind(minwage,minwage)
minwage_big$time = rep(NA,nrow(minwage_big))
minwage_big$time[1:nrow(minwage)] = "Before"
minwage_big$time[(nrow(minwage)+1):nrow(minwage_big)] = "After"
minwage_big$wageBefore[which(minwage_big$time=="After")] <- NA
minwage_big$fullBefore[which(minwage_big$time=="After")] <- NA
minwage_big$partBefore[which(minwage_big$time=="After")] <- NA
minwage_big$wageAfter[which(minwage_big$time=="Before")] <- NA
minwage_big$fullAfter[which(minwage_big$time=="Before")] <- NA
minwage_big$partAfter[which(minwage_big$time=="Before")] <- NA
head(minwage_big)
head(minwage_big)
minwage_big$fullPropBefore = minwage_big$fullBefore /
(minwage_big$fullBefore + minwage_big$partBefore)
minwage_big$fullPropAfter = minwage_big$fullAfter /
(minwage_big$fullAfter + minwage_big$partAfter)
head(minwage_big)
tail(minwage_big)
fullProp = c(minwage_big$fullPropBefore[!is.na(minwage_big$fullPropBefore)],minwage_big$fullPropAfter[!is.na(minwage_big$fullPropAfter)])
minwage_big$fullProp = fullProp
# fix location variable
minwage_big$location[which(minwage_big$location!="PA")] <- "NJ"
head(minwage_big)
head(minwage_big)
head(minwage_big)
fit = lm(fullProp ~ location + time + location*time, data=minwage_big)
summary(fit)
setwd("~/Dropbox/SalemCenter/classes/PRL/Spring2024/Policy-Research-Laboratory/code")
library(mosaic)
## load the data and subset them into two parties
MPs <- read.csv("../data/MPs.csv")
MPs.labour <- subset(MPs, subset = (party == "labour"))
MPs.tory <- subset(MPs, subset = (party == "tory"))
View(MPs.labour)
labour.fit1 <- lm(ln.net ~ margin,
data = MPs.labour[MPs.labour$margin < 0, ])
labour.fit2 <- lm(ln.net ~ margin,
data = MPs.labour[MPs.labour$margin > 0, ])
tory.fit1 <- lm(ln.net ~ margin, data = MPs.tory[MPs.tory$margin < 0, ])
tory.fit2 <- lm(ln.net ~ margin, data = MPs.tory[MPs.tory$margin > 0, ])
## Labour: range of predictions
y1l.range <- c(min(MPs.labour$margin), 0) # min to 0
y2l.range <- c(0, max(MPs.labour$margin)) # 0 to max
## prediction
y1.labour <- predict(labour.fit1, newdata = data.frame(margin = y1l.range))
y2.labour <- predict(labour.fit2, newdata = data.frame(margin = y2l.range))
## Tory: range of predictions
y1t.range <- c(min(MPs.tory$margin), 0) # min to 0
y2t.range <- c(0, max(MPs.tory$margin)) # 0 to max
## predict outcome
y1.tory <- predict(tory.fit1, newdata = data.frame(margin = y1t.range))
y2.tory <- predict(tory.fit2, newdata = data.frame(margin = y2t.range))
plot(MPs.labour$margin, MPs.labour$ln.net, main = "Labour",
xlim = c(-0.5, 0.5), ylim = c(6, 18), xlab = "Margin of victory",
ylab = "log net wealth at death",pch=19,col='gray')
## scatterplot with regression lines for labour
plot(MPs.labour$margin, MPs.labour$ln.net, main = "Labour",
xlim = c(-0.5, 0.5), ylim = c(6, 18), xlab = "Margin of victory",
ylab = "log net wealth at death",pch=19,col='gray')
## scatterplot with regression lines for labour
plot(MPs.labour$margin, MPs.labour$ln.net, main = "Labour",
xlim = c(-0.5, 0.5), ylim = c(6, 18), xlab = "Margin of victory",
ylab = "log net wealth at death",pch=19,col='gray')
abline(v = 0, lty = "dashed")
lines(y1l.range, y1.labour, col = "blue",lwd=2)
lines(y2l.range, y2.labour, col = "blue",lwd=2)
plot(MPs.tory$margin, MPs.tory$ln.net, main = "Tory", xlim = c(-0.5, 0.5),
ylim = c(6, 18), xlab = "Margin of victory",
ylab = "log net wealth at death",pch=19,col='gray')
abline(v = 0, lty = "dashed")
## add regression lines
lines(y1t.range, y1.tory, col = "blue",lwd=2)
lines(y2t.range, y2.tory, col = "blue",lwd=2)
## average net wealth for Tory MP
tory.MP <- exp(y2.tory[1])
tory.MP
## average net wealth for Tory non-MP
tory.nonMP <- exp(y1.tory[2])
tory.nonMP
## causal effect in pounds (what is the conclusion here?)
tory.MP - tory.nonMP
## How do we quantify uncertainty in this causal effect? (bootstrap!!)
boot_RD <- function(){
boot_data <- resample(MPs.tory)
tory.fit1 <- lm(ln.net ~ margin, data = boot_data[boot_data$margin < 0, ])
tory.fit2 <- lm(ln.net ~ margin, data = boot_data[boot_data$margin > 0, ])
networth_diff <- exp(coef(tory.fit2)[1]) - exp(coef(tory.fit1)[1])
networth_diff
}
tory_samp = replicate(1000,boot_RD())
hist(tory_samp)
abline(v=0,col=2,lwd=3)
confint(tory_samp,level=0.95)
setwd("~/Dropbox/SalemCenter/classes/PRL/Spring2024/Policy-Research-Laboratory/code")
library(ggplot2)
library(ClusterR)  # for kmeans++
library(foreach)
library(mosaic)
cars = read.csv('../data/cars.csv', header=TRUE)
summary(cars)
library(ggplot2)
library(ClusterR)  # for kmeans++
library(foreach)
library(mosaic)
cars = read.csv('../data/cars.csv', header=TRUE)
View(cars)
# Center and scale the data
X = cars[,-(1:9)]
X = scale(X, center=TRUE, scale=TRUE)
dim(x)
dim(X)
mu = attr(X,"scaled:center")
sigma = attr(X,"scaled:scale")
mu
clust1 = kmeans(X, 6, nstart=500)
clust1$center  # not super helpful
# What are the clusters?
round(clust1$center,3)  # not super helpful
clust1$center[1,]*sigma + mu
clust1$center[4,]*sigma + mu
which(clust1$cluster == 1)
round(clust1$center,3)  # not super helpful
which(clust1$cluster == 2)
which(clust1$cluster == 4)
qplot(Weight, Length, data=cars, color=factor(clust1$cluster))
qplot(Horsepower, CityMPG, data=cars, color=factor(clust1$cluster))
which(clust1$cluster == 2)
which(clust1$cluster == 2)
which(clust1$cluster == 3)
View(cars)
