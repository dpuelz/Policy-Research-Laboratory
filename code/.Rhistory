setwd("~/Dropbox/Charles/HeartData")
library(glmnet)
library(dummy)
library(mltools)
library(data.table)
library(plotmo)
# naming function
newgsub = function(text,newvarname){
gsub("V1_",newvarname,text)
}
namefun = function(variable,newvarname){
newgsub(colnames(variable),newvarname)
}
# data
DF = as.data.frame(read.csv("R-AAOCA_new.csv"))
DF <- as.data.frame(unclass(DF),stringsAsFactors=TRUE)
str(DF)
# making new outcome
## combine Ischemic.symptoms with "preop variables"
## single binary if any are 1, 0 otherwise.
Y1 = DF$Ischemic.symptoms + as.numeric(DF$PreOp_EST.N.neg.P.pos.=="P") + as.numeric(DF$Preop_SPI=="Pos")
# removing variables with no variation
iremove = which(sapply((lapply(DF,unique)),length)==1)
DF=DF[,-iremove]
gender = one_hot(as.data.table(DF$Gender))[,2]
colnames(gender)=namefun(gender,"gender")
race = one_hot(as.data.table(DF$Race_EthnIcity))[,-4]
colnames(race)=namefun(race,"race")
imlength = as.numeric(DF$IM.length)
cordom = one_hot(as.data.table(DF$Coroanry.dominance))[,-1]
colnames(cordom)=namefun(cordom,"cordom")
ostium = one_hot(as.data.table(DF$Stenotic.ostium))[,-1]
colnames(ostium)=namefun(ostium,"ostium")
geometry = one_hot(as.data.table(DF$round.oval.slit.like))[,-1]
colnames(geometry)=namefun(geometry,"geometry")
intramurality = one_hot(as.data.table(DF$Intramurality))[,-1]
colnames(intramurality)=namefun(intramurality,"intramurality")
acuteangulation = one_hot(as.data.table(DF$Acute.angulation.))[,-1]
colnames(acuteangulation)=namefun(acuteangulation,"acuteangulation")
# building the outcome and features
Y = Y1>0 # patient, based on the tests, is "high risk" for a heart attack etc
X = as.matrix(cbind(race,gender,imlength,cordom,ostium,geometry,intramurality,acuteangulation))
dim(X)
fit = glmnet(x=X,y=Y,family="binomial",alpha=1)
dim(fit$beta)
plot(fit)
plot_glmnet(fit)
fit = cv.glmnet(x=X,y=Y,family="binomial",alpha=1)
dim(fit$beta)
plot(fit)
plot_glmnet(fit)
names(fit)
fit$lambda.1se
which(fit$lambda==fit$lambda.1se)
fit$index
length(fit$lambda)
length(fit$beta)
dim(fit$beta)
fit$beta
names(fit)
lambda_opt = fit$lambda
fit_opt = glmnet(x=X,y=Y,family="binomial",alpha=1,lambda = lambda_opt)
fit_opt$beta
dim(fit_opt$beta)
fit = cv.glmnet(x=X,y=Y,family="binomial",alpha=1)
lambda_opt = fit$lambda
fit_opt = glmnet(x=X,y=Y,family="binomial",alpha=1,lambda = lambda_opt)
names(fit_opt)
head(fit_opt$beta)
fit = cv.glmnet(x=X,y=Y,family="binomial",alpha=1)
lambda_opt = fit$lambda
names(fit)
fit$cvm
plot(fit$cvm)
fit$glmnet.fit
names(fit)
fit$index
fit = cv.glmnet(x=X,y=Y,family="binomial",alpha=1)
lambda_opt = fit$lambda
fit_opt = glmnet(x=X,y=Y,family="binomial",alpha=1,lambda=lambda_opt)
names(fit_opt)
fit_opt$lambda
plot(fit_opt$lambda)
?glmnet
lambda_opt
lambda_opt
lambda_opt = fit$lambda
lambda_opt
fit = cv.glmnet(x=X,y=Y,family="binomial",alpha=1)
lambda_opt = fit$lambda
lambda_opt
fit = cv.glmnet(x=X,y=Y,family="binomial",alpha=1)
lambda_opt = fit$lambda.min
fit_opt = glmnet(x=X,y=Y,family="binomial",alpha=1,lambda=lambda_opt)
dim(fit_opt$beta)
minOOS_model = fit$beta
minOOS_model
fit_opt$beta
Y
dim(X)
minOOS_model = fit$beta
minOOS_model = fit_opt$beta
minOOS_model
minOOS_model!=0
which(minOOS_model!=0)
Xsmall = X[,ismall]
ismall = which(minOOS_model!=0)
# define a smaller set of variables
Xsmall = X[,ismall]
# define a smaller set of variables
Xsmall = X[,ismall]
fitlogit = glm(Y~Xsmall,family = "binomial")
summary(fitlogit)
ridge_est = minOOS_model[ismall]
logit_est = fitlogit$coefficients
plot(ridge_est,logit_est,pch=19,cex=0.7)
ridge_est = minOOS_model[ismall]
logit_est = fitlogit$coefficients
logit_est
ridge_est = minOOS_model[ismall]
logit_est = fitlogit$coefficients[-1]
plot(ridge_est,logit_est,pch=19,cex=0.7)
abline(0,1,col='red',lty=2)
summary(fitlogit)
fitlogit = glm(Y~X,family = "binomial")
summary(fitlogit)
fitlogit = glm(Y~X,family = "binomial")
summary(fitlogit)
pca = prcomp(X[,ismall])
summary(pca)
dim(X)
# pca
smalldata = as.data.frame(cbind(Y,X[,ismall]))
dim(smalldata)
colnames(smalldata)
pca$x
dim(pca$x)
ggplot(smalldata) +
geom_point(aes(x=PE, y=GRP, color=Genre))
smalldata = as.data.frame(cbind(smalldata,pca$x[,1:2]))
# pca
smalldata = as.data.frame(cbind(Y,X[,ismall]))
pca = prcomp(X[,ismall])
smalldata = as.data.frame(cbind(smalldata,pca$x[,1:2]))
head(smalldata)
library(ggplot2)
ggplot(smalldata) +
geom_point(aes(x=PC1, y=PC2, color=Y))
ggplot(smalldata) +
geom_point(aes(x=PC1, y=PC2, color=as.factor(Y)))
# pca
smalldata = as.data.frame(cbind(Y,X[,ismall]))
pca = prcomp(X[,ismall])
smalldata = as.data.frame(cbind(smalldata,pca$x[,1:9]))
ggplot(smalldata) +
geom_point(aes(x=PC1, y=PC3, color=as.factor(Y)))
ggplot(smalldata) +
geom_point(aes(x=PC2, y=PC3, color=as.factor(Y)))
hist(smalldata$PC1)
hist(smalldata$PC2)
hist(smalldata$PC3)
hist(smalldata$PC4)
?hclust
# hclust
Xscale = scale(X)
D = dist(Xscale)
D
dim(X)
dim(D)
# hclust
Xscale = scale(Xsmall)
D = dist(Xscale)
hc = hclust(D,method="average")
plot(hc)
hc = hclust(D,method="complete")
plot(hc)
clustering = cutree(hc,k=2)
clustering
clustering = cutree(hc,k=5)
clustering
which(clustering==2)
smalldata[i2,]
i2 = which(clustering==2)
smalldata[i2,]
library(tidyverse)
### Olympics data
# How do heights compare across summer vs. winter olympics?
ggplot(olympics_top20) +
geom_boxplot(aes(x=season, y=height))
dev.off()
setwd("~/Dropbox/SalemCenter/classes/IntroML-MSBAWP/MachineLearning_MSBA-WP/code")
nycflights13 <- read.csv('../data/nycflights13.csv')
head(nycflights13)
nycflights13 %>%
summarize(mean_dep_delay = mean(dep_delay))
nycflights13 <- read.csv('../data/nycflights13.csv')
nycflights13 %>%
summarize(mean_dep_delay = mean(dep_delay))
nycflights13 %>%
summarize(mosaic::favstats(dep_delay))
nycflights13 %>%
summarize(mean_dep_delay = mean(dep_delay, na.rm=TRUE))
nycflights13 %>%
summarize(mosaic::favstats(dep_delay))
by_origin_monthly = nycflights13 %>%
group_by(origin, month) %>%
summarize(count = n(),
mean_dep_delay = mean(dep_delay, na.rm=TRUE))
by_origin_monthly
View(by_origin_monthly)
sort(by_origin_monthly)
ggplot(by_origin_monthly) +
geom_col(aes(x=factor(month), y=mean_dep_delay)) +
facet_wrap(~origin)
nycflights13 = nycflights13 %>%
mutate(gain = dep_delay - arr_delay)
ggplot(nycflights13) +
geom_histogram(aes(x = gain), binwidth=5)
nycflights13 %>%
group_by(dest) %>%
summarize(mean_gain = mean(gain, na.rm=TRUE)) %>%
arrange(desc(mean_gain))
nycflights13 = nycflights13 %>%
mutate(
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
nycflights13 %>%
group_by(dest) %>%
summarize(mean_gain_per_hour = mean(gain_per_hour, na.rm=TRUE)) %>%
arrange(desc(mean_gain_per_hour))
head(nycflights13)
nycflights13 = nycflights13 %>%
mutate(gain = dep_delay - arr_delay)
ggplot(nycflights13) +
geom_histogram(aes(x = gain), binwidth=5)
nycflights13 %>%
group_by(dest) %>%
summarize(mean_gain = mean(gain, na.rm=TRUE)) %>%
arrange(desc(mean_gain))
head(nycflights13)
227/60
nycflights13 %>%
group_by(dest) %>%
summarize(mean_gain_per_hour = mean(gain_per_hour, na.rm=TRUE)) %>%
arrange(desc(mean_gain_per_hour))
##### needed packages:
library(tidyverse)
library(mosaic)
nycflights13 <- read.csv('../data/nycflights13.csv')
dim(nycflights13)
head(nycflights13)
nycflights13 %>%
summarize(mean_dep_delay = mean(dep_delay))
nycflights13 %>%
summarize(mosaic::favstats(dep_delay))
nycflights13 %>%
summarize(mean_dep_delay = mean(dep_delay, na.rm=TRUE))
by_origin_monthly = nycflights13 %>%
group_by(origin, month) %>%
summarize(count = n(),
mean_dep_delay = mean(dep_delay, na.rm=TRUE))
by_origin_monthly
ggplot(by_origin_monthly) +
geom_col(aes(x=factor(month), y=mean_dep_delay)) +
facet_wrap(~origin)
nycflights13 = nycflights13 %>%
mutate(gain = dep_delay - arr_delay)
ggplot(nycflights13) +
geom_histogram(aes(x = gain), binwidth=5)
# which routes from NYC gained the most time in the air, on average?
# need na.rm=TRUE because of missing values
nycflights13 %>%
group_by(dest) %>%
summarize(mean_gain = mean(gain, na.rm=TRUE)) %>%
arrange(desc(mean_gain))
nycflights13 = nycflights13 %>%
mutate(
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
# now which routes gained the most per hour?
nycflights13 %>%
group_by(dest) %>%
summarize(mean_gain_per_hour = mean(gain_per_hour, na.rm=TRUE)) %>%
arrange(desc(mean_gain_per_hour))
dev.off()
survey <- read.csv("~/Downloads/survey.csv)
survey <- read.csv("~/Downloads/survey.csv")
survey <- read.csv("~/Downloads/survey.csv")
survey
summary(survey)
years = unique(survey$year)
years
table(survey$ideology~year)
barplot(survey$ideology~year)
survey$ideology~year
barplot(survey$ideology~survey$year)
table(survey$ideology~survey$year)
years = unique(survey$year)
library(tidyverse)
survey %>%
group_by(year) %>%
summarize(mean=mean(ideology))
survey %>%
group_by(year) %>%
summarize(mean=mean(ideology,na.rm=T))
head(survey)
survey %>%
group_by(year,draft) %>%
summarize(mean=mean(ideology,na.rm=T))
ans2 = survey %>%
group_by(year) %>%
summarize(mean=mean(ideology,na.rm=T))
ans2
ans2 = as.data.frame(ans2)
ans2
ans3 = survey %>%
group_by(draft) %>%
summarize(mean=mean(ideology,na.rm=T))
ans3
Y=survey$ideology
Z=survey$draft
TE = mean(Y[Z==1]) - mean(Y[Z==0])
TE
TE = mean(Y[Z==1],na.rm=T) - mean(Y[Z==0],na.rm=T)
TE
ans3
ans4 = survey %>%
group_by(state,draft) %>%
summarize(mean=mean(ideology,na.rm=T))
ans4
ans2 = survey %>%
group_by(year) %>%
summarize(mean=mean(ideology,na.rm=T))
ans2
data=survey
head(data)
thestate=="CO"
thestate="CO"
subset(data,state==thestate)
datsub = subset(data,state==thestate)
TE_bystate = function(thestate,data)
{
datsub = subset(data,state==thestate)
Y = datsub$ideology
Z = datsub$draft
TE = mean(Y[Z==1],na.rm=T) - mean(Y[Z==0],na.rm=T)
return(TE)
}
TE_bystate("CO",data=survey)
ans4 = survey %>%
group_by(state,draft) %>%
summarize(mean=mean(ideology,na.rm=T))
ans4
TE_bystate("CO",data=survey)
survey <- read.csv("~/Downloads/survey.csv")
summary(survey)
survey %>%
group_by(year) %>%
summarize(mean=mean(ideology,na.rm=T))
ans3 = survey %>%
group_by(draft) %>%
summarize(mean=mean(ideology,na.rm=T))
ans3
mean(Y[Z==1],na.rm=T)
mean(Y[Z==0],na.rm=T)
TE = mean(Y[Z==1],na.rm=T) - mean(Y[Z==0],na.rm=T)
TE
ans4 = survey %>%
group_by(state,draft) %>%
summarize(mean=mean(ideology,na.rm=T))
ans4
TE_bystate("CO",data=survey)
TE_bystate("OR",data=survey)
setwd("~/Dropbox/SalemCenter/classes/PRL/Fall2023/Policy-Research-Laboratory/code")
## ------------------------------------------------------------------------
minwage <- read.csv("../data/minwage.csv") # load the data
dim(minwage)
summary(minwage)
dim(minwage)
summary(minwage)
dim(minwage)
minwageNJ <- subset(minwage, subset = (location != "PA"))
minwagePA <- subset(minwage, subset = (location == "PA"))
minwageNJ$wageBefore < 5.05
mean(minwageNJ$wageBefore < 5.05)
mean(minwageNJ$wageBefore < 5.05)
mean(minwageNJ$wageAfter < 5.05)
mean(minwagePA$wageBefore < 5.05)
mean(minwagePA$wageAfter < 5.05)
mean(minwagePA$wageBefore < 5.05)
mean(minwagePA$wageAfter < 5.05)
mean(minwageNJ$wageBefore < 5.05)
mean(minwageNJ$wageAfter < 5.05)
minwageNJ$fullPropAfter <- minwageNJ$fullAfter /
(minwageNJ$fullAfter + minwageNJ$partAfter)
minwagePA$fullPropAfter <- minwagePA$fullAfter /
(minwagePA$fullAfter + minwagePA$partAfter)
head(minwageNJ)
mean(minwageNJ$fullPropAfter) - mean(minwagePA$fullPropAfter)
mean(minwageNJ$fullPropAfter) - mean(minwagePA$fullPropAfter)
prop.table(table(minwageNJ$chain))
prop.table(table(minwagePA$chain))
minwageNJ$chain
prop.table(table(minwageNJ$chain))
prop.table(table(minwagePA$chain))
minwageNJ.bk <- subset(minwageNJ, subset = (chain == "burgerking"))
minwageNJ.bk <- subset(minwageNJ, subset = (chain == "burgerking"))
minwagePA.bk <- subset(minwagePA, subset = (chain == "burgerking"))
mean(minwageNJ.bk$fullPropAfter) - mean(minwagePA.bk$fullPropAfter)
minwageNJ.bk.subset <-
subset(minwageNJ.bk, subset = ((location != "shoreNJ") &
(location != "centralNJ")))
minwageNJ.bk.subset <-
subset(minwageNJ.bk, subset = ((location != "shoreNJ") &
(location != "centralNJ")))
mean(minwageNJ.bk.subset$fullPropAfter) - mean(minwagePA.bk$fullPropAfter)
minwageNJ$fullPropBefore <- minwageNJ$fullBefore /
(minwageNJ$fullBefore + minwageNJ$partBefore)
NJdiff <- mean(minwageNJ$fullPropAfter) - mean(minwageNJ$fullPropBefore)
NJdiff
minwagePA$fullPropBefore <- minwagePA$fullBefore /
(minwagePA$fullBefore + minwagePA$partBefore)
PAdiff <- mean(minwagePA$fullPropAfter) - mean(minwagePA$fullPropBefore)
NJdiff - PAdiff
median(minwageNJ$fullPropAfter) - median(minwagePA$fullPropAfter)
NJdiff.med <- median(minwageNJ$fullPropAfter) -
median(minwageNJ$fullPropBefore)
NJdiff.med
# The Lab projections
library(mosaic)
library(tidyverse)
library(ggplot2)
library(scales)
timehorizon = 10
revenue = rep(NA,timehorizon)
cost = rep(NA,timehorizon)
# plot dimensions (global)
height = 4.5
width_small = 4.5
width = 7.5
## REVENUE ##################################
# revenue side first
# first 2 years, no tuition
allrev = do(1000)*{
tuition = c(0,0,rep(50000,8))
numstudents = rbinom(1,67,0.75)
revenue = tuition*numstudents
revenuecum = cumsum(revenue)
list(revenue=revenue,revenuecum=revenuecum)
}
revup = t(apply(matrix(unlist(allrev$revenuecum),ncol=timehorizon,byrow=TRUE),2,quantile,c(0.025,0.5,0.975)))
revup = revup/1e6
revup = cbind(factor(1:timehorizon),as.data.frame(revup))
colnames(revup) = c("Year","","Revenue","")
pdf("texdoc/cumrev.pdf",height,width)
# The Lab projections
library(mosaic)
library(tidyverse)
library(ggplot2)
library(scales)
timehorizon = 10
revenue = rep(NA,timehorizon)
cost = rep(NA,timehorizon)
# plot dimensions (global)
height = 4.5
width_small = 4.5
width = 7.5
## REVENUE ##################################
# revenue side first
# first 2 years, no tuition
allrev = do(1000)*{
tuition = c(0,0,rep(50000,8))
numstudents = rbinom(1,67,0.75)
revenue = tuition*numstudents
revenuecum = cumsum(revenue)
list(revenue=revenue,revenuecum=revenuecum)
}
revup = t(apply(matrix(unlist(allrev$revenuecum),ncol=timehorizon,byrow=TRUE),2,quantile,c(0.025,0.5,0.975)))
revup = revup/1e6
revup = cbind(factor(1:timehorizon),as.data.frame(revup))
colnames(revup) = c("Year","","Revenue","")
ggplot(revup,aes(x=Year,y=Revenue, group=1)) +
xlab("Year") + ylab("Cumulative revenue (millions)") +
geom_ribbon(aes(ymin = revup[,2], ymax = revup[,4]), fill = "grey75",alpha=0.75) +
geom_point(color = "black", size = .5) +
scale_y_continuous(labels=scales::dollar_format()) +
geom_line(aes(y = revup$Revenue)) +
geom_text(size=3.01,hjust = 0, nudge_x = -.45,vjust = 0, nudge_y = 0.1,aes(label = dollar(Revenue)))
pdf("texdoc/cumrev.pdf",height,width)
pdf(file = "texdoc/cumrev.pdf",height,width)
